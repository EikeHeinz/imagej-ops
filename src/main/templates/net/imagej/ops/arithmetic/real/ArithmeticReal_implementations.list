[RealGammaConstant.java]
compute_body=```
double inputVal = input.getRealDouble();
if (inputVal <= 0) output.setReal(0); else {
	output.setReal( Math.exp(this.constant * Math.log(inputVal)) );
}
```
javadoc=Sets the real component of an output real number to the gamma value of the real component of an input real number.
interface=GammaConstant
members=[{name:constant}]


[RealCubeRoot.java]
compute_expr= Math.cbrt(input.getRealDouble())
javadoc=Sets the real component of an output real number to the cube root of the real component of an input real number.
interface=CubeRoot


[RealStep.java]
compute_body=```
if (input.getRealDouble() < 0) output.setZero(); else output.setOne();
```
javadoc=Sets an output real number to 0 if the input real number is less than 0. Otherwise sets the output real number to 1. This implements a step function similar to Mathematica's unitstep function. It is a Heaviside step function with h(0) = 1 rather than 0.5.
interface=Step


[RealAddNoise.java]
omit_return=true
compute_body=```
if (rng == null) {
	rng = new Random(System.currentTimeMillis());
}
int i = 0;
do {
    double newVal = input.getRealDouble() + (rng.nextGaussian() * rangeStdDev);
    if ((rangeMin <= newVal) && (newVal <= rangeMax)) {
        output.setReal(newVal);
        return output;
    }
    if (i++ > 100) throw new IllegalArgumentException("noise function failing to terminate. probably misconfigured.");
} while (true);
```
javadoc=Sets the real component of an output real number to the addition of the real component of an input real number with an amount of Gaussian noise.
interface=AddNoise
members=[{name:rangeMin},{name:rangeMax},{name:rangeStdDev},{name:rng,type:Random}]
imports=[java.util.Random]

[RealCsch.java]
compute_expr= 1.0 / Math.sinh(input.getRealDouble())
javadoc=Sets the real component of an output real number to the hyperbolic cosecant of the real component of an input real number.
interface=Csch


[RealSincPi.java]
compute_body=```
double x = input.getRealDouble();
double value;
if (x == 0) value = 1; else value = Math.sin(Math.PI * x) / (Math.PI * x);
output.setReal(value);
```
javadoc=Sets the real component of an output real number to the sinc (pi version) of the real component of an input real number. The pi version of sinc is defined as sin(x*pi) / (x*pi).
interface=SincPi


[RealExpMinusOne.java]
compute_expr= Math.exp(input.getRealDouble()) - 1
javadoc=Sets the real component of an output real number to e^x - 1. x is the input argument to the operation.
interface=ExpMinusOne


[RealSech.java]
compute_expr= 1.0 / Math.cosh(input.getRealDouble())
javadoc=Sets the real component of an output real number to the hyperbolic secant of the real component of an input real number.
interface=Sech


[RealArctanh.java]
compute_body=double xt = input.getRealDouble();output.setReal( 0.5 * Math.log((1 + xt) / (1 - xt)) );
javadoc=Sets the real component of an output real number to the inverse hyperbolic tangent of the real component of an input real number.
interface=Arctanh


[RealOrConstant.java]
compute_expr= constant | (long) input.getRealDouble()
javadoc=Sets the real component of an output real number to the logical OR of the real component of an input real number with a constant value.
interface=OrConstant
members=[{name:constant,type:long}]


[RealLog.java]
compute_expr= Math.log(input.getRealDouble())
javadoc=Sets the real component of an output real number to the natural log of the real component of an input real number.
interface=Log


[RealNearestInt.java]
compute_expr= Math.rint(input.getRealDouble())
javadoc=Sets the real component of an output real number to the nearest integral value of the real component of an input real number.
interface=NearestInt


[RealConstant.java]
compute_expr=constant
javadoc=Sets the real component of an output real number to a constant value.
interface=Constant
members=[{name:constant}]


[RealCoth.java]
compute_expr= 1.0 / Math.tanh(input.getRealDouble())
javadoc=Sets the real component of an output real number to the hyperbolic cotangent of the real component of an input real number.
interface=Coth


[RealGaussianRandom.java]
compute_expr= rng.nextGaussian() * Math.abs(input.getRealDouble())
javadoc=Sets the real component of an output real number to a random value using a gaussian distribution. The input value is considered the standard deviation of the desired distribution and must be positive. The output value has mean value 0.
interface=GaussianRandom
members=[{name:rng,init:new Random(),type:Random}]
imports=[java.util.Random]


[RealSec.java]
compute_expr= 1.0 / Math.cos(input.getRealDouble())
javadoc=Sets the real component of an output real number to the secant of the real component of an input real number.
interface=Sec


[RealUlp.java]
compute_expr= Math.ulp(input.getRealDouble())
javadoc=Sets the real component of an output real number to the size of the ulp of an input real number. An ulp of a floating point value is the positive distance between an input floating-point value and the floating point value next larger in magnitude. Note that for non-NaN x, ulp(-x) == ulp(x).
interface=Ulp


[RealCopy.java]
compute_expr= input.getRealDouble()
javadoc=Sets the real component of an output real number to the real component of an input real number.
interface=Copy


[RealPowerConstant.java]
compute_expr= Math.pow(input.getRealDouble(), constant)
javadoc=Sets the real component of an output real number to the raising of the real component of an input real number to a constant value.
interface=PowerConstant
members=[{name:constant}]


[RealRound.java]
compute_expr=Math.round(input.getRealDouble())
javadoc=Sets the real component of an output real number to the rounding of the real component of an input real number.
interface=Round


[RealUniformRandom.java]
compute_body=double r = rng.nextDouble();output.setReal( r * input.getRealDouble() );
javadoc=Sets the real component of an output real number to a random value between 0 and (input real number).
interface=UniformRandom
members=[{name:rng,init:new Random(),type:Random}]
imports=[java.util.Random]


[RealArccsch.java]
compute_body=```
double xt = input.getRealDouble();
double delta = Math.sqrt(1 + (1 / (xt * xt)));
output.setReal( Math.log((1 / xt) + delta) );
```
javadoc=Sets the real component of an output real number to the inverse hyperbolic cosecant of the real component of an input real number.
interface=Arccsch


[RealMinConstant.java]
compute_body=```
double value = input.getRealDouble();
if (value > constant) output.setReal(value); else output.setReal(constant);
```
javadoc=Sets the real component of an output real number to the real component of an input real number unless it is less then a minimum value. If it is less than the minimum value then it sets the output real component to that minimum value.
interface=MinConstant
members=[{name:constant}]


[RealCsc.java]
compute_expr= 1.0 / Math.sin(input.getRealDouble())
javadoc=Sets the real component of an output real number to the cosecant of the real component of an input real number.
interface=Csc


[RealAbs.java]
compute_expr=Math.abs(input.getRealDouble())
javadoc=Sets the real component of an output real number to the absolute value of the real component of an input real number.
interface=Abs


[RealXorConstant.java]
compute_expr= constant ^ (long) input.getRealDouble()
javadoc=Sets the real component of an output real number to the logical XOR of the real component of an input real number with a constant value.
interface=XorConstant
members=[{name:constant,type:long}]


[RealFloor.java]
compute_expr= Math.floor(input.getRealDouble())
javadoc=Sets the real component of an output real number to the floor of the real component of an input real number.
interface=Floor


[RealSignum.java]
compute_expr= Math.signum(input.getRealDouble())
javadoc=Sets the real component of an output real number to the signum of the real component of an input real number. It equals -1 if the input number is less than 0, it equals 1 if the input number is greater than 0, and it equals 0 if the input number equals 0.
interface=Signum


[RealExp.java]
compute_expr= Math.exp(input.getRealDouble())
javadoc=Sets the real component of an output real number to the exponentiation of the real component of an input real number. (e raised to a power)
interface=Exp


[RealSubtract.java]
compute_expr= input.getRealDouble() - constant
javadoc=Sets the real component of an output real number to the subtraction from the real component of an input real number a constant value.
interface=Subtract
members=[{name:constant}]


[RealNegate.java]
compute_expr= -input.getRealDouble()
javadoc=Sets the real component of an output real number to the negation of the real component of an input real number.
interface=Negate


[RealSin.java]
compute_expr= Math.sin(input.getRealDouble())
javadoc=Sets the real component of an output real number to the sine of the real component of an input real number.
interface=Sin


[RealCot.java]
compute_expr= 1.0 / Math.tan(input.getRealDouble())
javadoc=Sets the real component of an output real number to the cotangent of the real component of an input real number.
interface=Cot


[RealTan.java]
compute_expr= Math.tan(input.getRealDouble())
javadoc=Sets the real component of an output real number to the tangent of the real component of an input real number.
interface=Tan


[RealLog2.java]
compute_expr= Math.log(input.getRealDouble()) / Math.log(2)
javadoc=Sets the real component of an output real number to the base 2 log of the real component of an input real number.
interface=Log2


[RealArccos.java]
compute_expr= Math.acos(input.getRealDouble())
javadoc=Sets the real component of an output real number to the inverse cosine of the real component of an input real number.
interface=Arccos


[RealArccot.java]
compute_body=```
double value = Math.atan(1.0 / input.getRealDouble());
if (input.getRealDouble() < 0) value += Math.PI;
output.setReal(value);
```
javadoc=Sets the real component of an output real number to the inverse cotangent of the real component of an input real number.
interface=Arccot


[RealLog10.java]
compute_expr= Math.log10(input.getRealDouble())
javadoc=Sets the real component of an output real number to the 10-based log of the real component of an input real number.
interface=Log10


[RealInvert.java]
compute_expr= specifiedMax - (input.getRealDouble() - specifiedMin)
javadoc=Sets the real component of an output real number to the inversion of the real component of an input real number about a range.
interface=Invert
members=[{name:specifiedMin},{name:specifiedMax}]


[RealDivide.java]
compute_body=```
if (constant == 0) {
	output.setReal(dbzVal);
} else {
	output.setReal( input.getRealDouble() / constant );
}
```
javadoc=Sets the real component of an output real number to the division of the real component of an input real number by a constant value.
interface=Divide
members=[{name:constant},{name:dbzVal}]


[RealArcsech.java]
compute_body=```
double xt = input.getRealDouble();
double numer = 1 + Math.sqrt(1 - xt * xt);
output.setReal( Math.log(numer / xt) );
```
javadoc=Sets the real component of an output real number to the inverse hyperbolic secant of the real component of an input real number.
interface=Arcsech


[RealArccoth.java]
compute_body=double xt = input.getRealDouble();output.setReal( 0.5 * Math.log((xt + 1) / (xt - 1)) );
javadoc=Sets the real component of an output real number to the inverse hyperbolic cotangent of the real component of an input real number.
interface=Arccoth


[RealSinc.java]
compute_body=```
double x = input.getRealDouble();
double value;
if (x == 0) value = 1; else value = Math.sin(x) / x;
output.setReal(value);
```
javadoc=Sets the real component of an output real number to the sinc value of the real component of an input real number. The sinc function is defined as sin(x) / x.
interface=Sinc


[RealArcsec.java]
compute_body=```
double xt = input.getRealDouble();
if ((xt > -1) && (xt < 1)) throw new IllegalArgumentException("arcsec(x) : x out of range"); else if (xt == -1) output.setReal(Math.PI); else if (xt == 1) output.setReal(0); else {
    tmp.setReal(Math.sqrt(xt * xt - 1) / xt);
    asin.compute(tmp, angle);
    double value = angle.getRealDouble();
    if (xt < -1) value += Math.PI;
    output.setReal(value);
}
```
javadoc=Sets the real component of an output real number to the inverse secant of the real component of an input real number.
interface=Arcsec
members=[{name:asin,init:"new RealArcsin<DoubleType, DoubleType>()",modifiers:final static,type:"RealArcsin<DoubleType, DoubleType>"},{name:angle,init:new DoubleType(),type:DoubleType},{name:tmp,init:new DoubleType(),type:DoubleType}]
imports=[net.imglib2.type.numeric.real.DoubleType]


[RealCeil.java]
compute_expr=Math.ceil(input.getRealDouble())
javadoc=Sets the real component of an output real number to the ceiling of the real component of an input real number.
interface=Ceil


[RealArcsinh.java]
compute_body=```
double xt = input.getRealDouble();
double delta = Math.sqrt(xt * xt + 1);
output.setReal( Math.log(xt + delta) );
```
javadoc=Sets the real component of an output real number to the inverse hyperbolic sine of the real component of an input real number.
interface=Arcsinh


[RealArctan.java]
compute_expr= Math.atan(input.getRealDouble())
javadoc=Sets the real component of an output real number to the inverse tangent of the real component of an input real number.
interface=Arctan


[RealArccosh.java]
compute_body=```
double xt = input.getRealDouble();
double delta = Math.sqrt(xt * xt - 1);
if (xt <= -1) delta = -delta;
output.setReal( Math.log(xt + delta) );
```
javadoc=Sets the real component of an output real number to the inverse hyperbolic cosine of the real component of an input real number.
interface=Arccosh


[RealCosh.java]
compute_expr= Math.cosh(input.getRealDouble())
javadoc=Sets the real component of an output real number to the hyperbolic cosine of the real component of an input real number.
interface=Cosh


[RealMaxConstant.java]
compute_body=```
double value = input.getRealDouble();
if (value < constant) output.setReal(value); else output.setReal(constant);
```
javadoc=Sets the real component of an output real number to the real component of an input real number unless it exceeds a maximum value. If it exceeds the maximum value then it sets the output real component to that maximum value.
interface=MaxConstant
members=[{name:constant}]


[RealReciprocal.java]
compute_body=```
double inputVal = input.getRealDouble();
if (inputVal == 0) output.setReal(dbzVal); else output.setReal(1.0 / inputVal);
```
javadoc=Sets the real component of an output real number to the reciprocal of the real component of an input real number.
interface=Reciprocal
members=[{name:dbzVal}]


[RealCos.java]
compute_expr= Math.cos(input.getRealDouble())
javadoc=Sets the real component of an output real number to the cosine of the real component of an input real number.
interface=Cos


[RealMultiply.java]
compute_expr= input.getRealDouble() * constant
javadoc=Sets the real component of an output real number to the multiplication of the real component of an input real number with a constant value.
interface=Multiply
members=[{name:constant}]


[RealLogOnePlusX.java]
compute_expr= Math.log1p(input.getRealDouble())
javadoc=Sets the real component of an output real number to the natural logarithm of the sum of the argument and 1. This calculation is more accurate than explicitly calling log(1.0 + x).
interface=LogOnePlusX


[RealSqr.java]
compute_body=```
double value = input.getRealDouble();
output.setReal(value * value);
```
javadoc=Sets the real component of an output real number to the square of the real component of an input real number.
interface=Sqr


[RealSqrt.java]
compute_expr= Math.sqrt(input.getRealDouble())
javadoc=Sets the real component of an output real number to the square root of the real component of an input real number.
interface=Sqrt


[RealArccsc.java]
compute_body=```
double xt = input.getRealDouble();
if ((xt > -1) && (xt < 1)) throw new IllegalArgumentException("arccsc(x) : x out of range"); else if (xt == -1) output.setReal(-Math.PI / 2); else if (xt == 1) output.setReal(Math.PI / 2); else {
    tmp.setReal(Math.sqrt(xt * xt - 1) / xt);
    acos.compute(tmp, angle);
    output.setReal(angle.getRealDouble());
}
```
javadoc=Sets the real component of an output real number to the inverse cosecant of the real component of an input real number.
interface=Arccsc
members=[{name:acos,init:"new RealArccos<DoubleType, DoubleType>()",modifiers:final static,type:"RealArccos<DoubleType, DoubleType>"},{name:angle,init:new DoubleType(),type:DoubleType},{name:tmp,init:new DoubleType(),type:DoubleType}]
imports=[net.imglib2.type.numeric.real.DoubleType]


[RealZero.java]
compute_body=```
output.setZero();
```
javadoc=Sets the real component of an output real number to zero.
interface=Zero


[RealAdd.java]
compute_expr= input.getRealDouble() + constant
javadoc=Sets the real component of an output real number to the addition of the real component of an input real number with a constant value.
interface=Add
members=[{name:constant}]


[RealArcsin.java]
compute_expr= Math.asin(input.getRealDouble())
javadoc=Sets the real component of an output real number to the inverse sine of the real component of an input real number.
interface=Arcsin


[RealSinh.java]
compute_expr= Math.sinh(input.getRealDouble())
javadoc=Sets the real component of an output real number to the hyperbolic sine of the real component of an input real number.
interface=Sinh


[RealAndConstant.java]
compute_expr= constant & (long) input.getRealDouble()
javadoc=Sets the real component of an output real number to the logical AND of the real component of an input real number with a constant value.
interface=AndConstant
members=[{name:constant,type:long}]


[RealTanh.java]
compute_expr= Math.tanh(input.getRealDouble())
javadoc=Sets the real component of an output real number to the hyperbolic tangent of the real component of an input real number.
interface=Tanh


