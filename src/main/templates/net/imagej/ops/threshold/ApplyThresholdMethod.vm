/*
 * #%L
 * ImageJ software for multidimensional image processing and analysis.
 * %%
 * Copyright (C) 2014 - 2015 Board of Regents of the University of
 * Wisconsin-Madison and University of Konstanz.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package net.imagej.ops.threshold;

import java.util.List;

import net.imagej.ops.Ops;
import net.imglib2.histogram.Histogram1d;
import net.imglib2.img.Img;
import net.imglib2.type.numeric.RealType;

import org.scijava.plugin.Plugin;

/**
 * Ops which computes and apply a global threshold to an {@link Img}.
 * 
 * @author Christian Dietz (University of Konstanz)
 * @author Curtis Rueden
 * @author Brian Northan
 */
public final class ApplyThresholdMethod {

	private ApplyThresholdMethod() {
		// NB: Prevent instantiation of utility class.
	}

	/**
	 * Dirty hack to coerce {@code Compute*Threshold} methods which have an extra
	 * {@code errMsg} output. Eventually it might be nice to redesign how error
	 * messages work for thresholding, to avoid polluting the output objects.
	 */
	private static <T> T unwrap(final List<Object> list) {
		@SuppressWarnings("unchecked")
		final T result = (T) list.get(0);
		return result;
	}
#foreach ($method in $methods)
#set ($iface = "Ops.Threshold.${method.iface}")

	@Plugin(type = ${iface}.class)
	public static class ${method.iface}<T extends RealType<T>>
		extends AbstractApplyThresholdImg<T, Img<T>>
		implements ${iface}
	{

		@Override
		public T getThreshold(final Img<T> input) {
			final Histogram1d<T> hist = ops().image().histogram(input);
#if ($method.list)
			return unwrap(ops().threshold().${method.name}(hist));
#else
			return ops().threshold().${method.name}(hist);
#end
		}
	}
#end

}
