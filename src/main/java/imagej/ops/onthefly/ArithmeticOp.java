/*
 * #%L
 * ImageJ OPS: a framework for reusable algorithms.
 * %%
 * Copyright (C) 2014 Board of Regents of the University of
 * Wisconsin-Madison and University of Konstanz.
 * %%
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 * 
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 * 
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 * #L%
 */

package imagej.ops.onthefly;

import imagej.ops.Contingent;
import imagej.ops.Op;

import java.net.URL;
import java.net.URLClassLoader;
import java.util.HashMap;
import java.util.Map;

import javassist.ClassClassPath;
import javassist.ClassPool;
import javassist.CtClass;
import javassist.CtNewMethod;
import net.imglib2.img.Img;
import net.imglib2.img.array.ArrayImg;
import net.imglib2.img.basictypeaccess.array.ArrayDataAccess;
import net.imglib2.img.planar.PlanarImg;
import net.imglib2.type.numeric.RealType;

import org.scijava.ItemIO;
import org.scijava.Priority;
import org.scijava.plugin.Parameter;
import org.scijava.plugin.Plugin;

/**
 * A class generator for specialized {@link Op}s.
 * <p>
 * This class uses <a href="http://www.javassist.org/">Javassist</a> to generate
 * optimized versions of arithmetic operations on-the-fly. To this end, the
 * {@link #conforms()} method has to match the parameters carefully, to ensure
 * that the {@link #run()} method will not have problems processing those
 * parameters.
 * </p>
 * <p>
 * When {@link #run()} is called, it first determines the exact data types of
 * its parameters -- verifying again that the op works for them -- and then
 * generates a new class, based on the exact parameter types, which it loads
 * into a new class loader -- to avoid polluting the current class loader -- and
 * executes it. To avoid unnecessary work, the generated classes are cached.
 * </p>
 * 
 * @author Johannes Schindelin
 */
public abstract class ArithmeticOp implements Op, Contingent {

	/** The 'add' op */
	@Plugin(type = Op.class, name = "add", priority = Priority.HIGH_PRIORITY)
	public static class AddOp extends ArithmeticOp {

		@Override
		public void run() {
			run("add", "+");
		}
	}

	/** The 'subtract' op */
	@Plugin(type = Op.class, name = "subtract", priority = Priority.HIGH_PRIORITY)
	public static class SubtractOp extends ArithmeticOp {

		@Override
		public void run() {
			run("subtract", "-");
		}
	}

	/** The 'multiply' op */
	@Plugin(type = Op.class, name = "multiply", priority = Priority.HIGH_PRIORITY)
	public static class MultiplyOp extends ArithmeticOp {

		@Override
		public void run() {
			run("multiply", "*");
		}
	}

	/** The 'divide' op */
	@Plugin(type = Op.class, name = "divide", priority = Priority.HIGH_PRIORITY)
	public static class DivideOp extends ArithmeticOp {

		@Override
		public void run() {
			run("divide", "/");
		}
	}

	@Parameter(type = ItemIO.BOTH)
	private Object result;

	@Parameter
	private Object a;

	@Parameter
	private Object b;

	/**
	 * A generic interface to be implemented by the classes generated by this
	 * class.
	 */
	public interface MyOp {

		/**
		 * The most generic signature for an operation on two inputs with one
		 * output.
		 * 
		 * @param result output
		 * @param a first input
		 * @param b second input
		 */
		void run(Object result, Object a, Object b);
	}

	protected void run(final String name, final String operator) {
		if (a instanceof ArrayImg) {
			final Object access = ((ArrayImg<?, ?>) this.a).update(null);
			if (access instanceof ArrayDataAccess) {
				final Object a = ((ArrayDataAccess<?>) access).getCurrentStorageArray();
				final Object result =
					((ArrayDataAccess<?>) ((ArrayImg<?, ?>) this.result).update(null))
						.getCurrentStorageArray();
				if (b instanceof RealType) {
					final double b = ((RealType<?>) this.b).getRealDouble();
					getMyConstantOp(a.getClass(), name, operator).run(result, a, b);
				}
				else {
					final Object b =
						((ArrayDataAccess<?>) ((ArrayImg<?, ?>) this.b).update(null))
							.getCurrentStorageArray();
					getMyOp(a.getClass(), name, operator).run(result, a, b);
				}
				return;
			}
		}
		if (a instanceof PlanarImg) {
			final PlanarImg<?, ?> a = (PlanarImg<?, ?>) this.a;
			if (a.numSlices() == 0) return;
			final Object plane =
				((ArrayDataAccess<?>) a.getPlane(0)).getCurrentStorageArray();
			final PlanarImg<?, ?> b = (PlanarImg<?, ?>) this.b;
			final PlanarImg<?, ?> result = (PlanarImg<?, ?>) this.result;
			getPlanarOp(plane.getClass(), name, operator).run(result, a, b);
			return;
		}
		throw new RuntimeException("This should not happen!");
	}

	@Override
	public boolean conforms() {
		if (result == b && a != b) return false;
		if (a instanceof ArrayImg && b instanceof ArrayImg &&
			result instanceof ArrayImg)
		{
			final ArrayImg<?, ?> aImg = (ArrayImg<?, ?>) a;
			final ArrayImg<?, ?> bImg = (ArrayImg<?, ?>) b;
			if (!dimensionsMatch(aImg, bImg)) return false;
			final ArrayImg<?, ?> resultImg = (ArrayImg<?, ?>) result;
			if (!dimensionsMatch(aImg, resultImg)) return false;
			final Object aData = aImg.update(null);
			if (!(aData instanceof ArrayDataAccess)) return false;
			final Object bData = bImg.update(null);
			if (aData.getClass() != bData.getClass()) return false;
			final Object resultData = resultImg.update(null);
			if (aData.getClass() != resultData.getClass()) return false;
			return true;
		}
		if (a instanceof ArrayImg && b instanceof RealType &&
			result instanceof ArrayImg)
		{
			final ArrayImg<?, ?> aImg = (ArrayImg<?, ?>) a;
			final ArrayImg<?, ?> resultImg = (ArrayImg<?, ?>) result;
			if (!dimensionsMatch(aImg, resultImg)) return false;
			final Object aData = aImg.update(null);
			if (!(aData instanceof ArrayDataAccess)) return false;
			// TODO: verify that a matches b: final RealType<?> bType = (RealType<?>)
			// b;
			final Object resultData = resultImg.update(null);
			if (aData.getClass() != resultData.getClass()) return false;
			return true;
		}
		if (a instanceof PlanarImg && b instanceof PlanarImg &&
			result instanceof PlanarImg)
		{
			final PlanarImg<?, ?> aImg = (PlanarImg<?, ?>) a;
			final PlanarImg<?, ?> bImg = (PlanarImg<?, ?>) b;
			if (!dimensionsMatch(aImg, bImg)) return false;
			final PlanarImg<?, ?> resultImg = (PlanarImg<?, ?>) result;
			if (!dimensionsMatch(aImg, resultImg)) return false;
			final int numSlices = aImg.numSlices();
			if (numSlices == 0 || numSlices != bImg.numSlices() ||
				numSlices != resultImg.numSlices()) return false;
			final Object aData = aImg.getPlane(0);
			if (!(aData instanceof ArrayDataAccess)) return false;
			final Object bData = bImg.getPlane(0);
			if (aData.getClass() != bData.getClass()) return false;
			final Object resultData = resultImg.getPlane(0);
			if (aData.getClass() != resultData.getClass()) return false;
			return true;
		}
		return false;
	}

	private boolean dimensionsMatch(final Img<?> aImg, final Img<?> bImg) {
		final int numDimensions = aImg.numDimensions();
		if (numDimensions != bImg.numDimensions()) return false;
		for (int i = 0; i < numDimensions; i++) {
			if (aImg.dimension(i) != bImg.dimension(i)) return false;
		}
		return true;
	}

	private final static Map<String, MyOp> ops = new HashMap<String, MyOp>();
	private final static ClassLoader loader;
	private final static ClassPool pool;

	static {
		loader = new URLClassLoader(new URL[0]);
		pool = new ClassPool(false);
		pool.appendClassPath(new ClassClassPath(AddOp.class));
	}

	private MyOp getMyOp(final Class<?> forClass, final String name,
		final String operator)
	{
		final String componentType = forClass.getComponentType().getSimpleName();
		final String myOpName = "myOp$" + name + "$" + componentType;
		MyOp op = ops.get(myOpName);
		if (op != null) return op;

		try {
			final String type = forClass.getSimpleName();
			final CtClass clazz =
				pool.makeClass(myOpName, pool.get(Object.class.getName()));
			clazz.addInterface(pool.get(MyOp.class.getName()));
			final String src =
				replace(makeRun(type, type, type,
					"for (int i = 0; i < a2.length; i++) {",
					"  result2[i] = (CTYPE) (a2[i] OP b2[i]);", // actual op
					"}"), "OP", operator, "CTYPE", componentType, "TYPE", type);
			clazz.addMethod(CtNewMethod.make(src, clazz));
			op = (MyOp) clazz.toClass(loader, null).newInstance();
			ops.put(myOpName, op);
			return op;
		}
		catch (final Throwable t) {
			throw new RuntimeException(t);
		}
	}

	private MyOp getMyConstantOp(final Class<?> forClass, final String name,
		final String operator)
	{
		final String componentType = forClass.getComponentType().getSimpleName();
		final String myOpName = "myConstantOp$" + name + "$" + componentType;
		MyOp op = ops.get(myOpName);
		if (op != null) return op;

		try {
			final String type = forClass.getSimpleName();
			final CtClass clazz =
				pool.makeClass(myOpName, pool.get(Object.class.getName()));
			clazz.addInterface(pool.get(MyOp.class.getName()));
			final String src =
				replace(makeRun(type, componentType, type,
					"for (int i = 0; i < a2.length; i++) {",
					"  result2[i] = (CTYPE) (a2[i] OP b2);", // actual op
					"}"), "OP", operator, "CTYPE", componentType, "TYPE", type);
			clazz.addMethod(CtNewMethod.make(src, clazz));
			op = (MyOp) clazz.toClass(loader, null).newInstance();
			ops.put(myOpName, op);
			return op;
		}
		catch (final Throwable t) {
			throw new RuntimeException(t);
		}
	}

	private MyOp getPlanarOp(final Class<?> forClass, final String name,
		final String operator)
	{
		final String componentType = forClass.getComponentType().getSimpleName();
		final String myOpName = "myOp$planar$" + name + "$" + componentType;
		MyOp op = ops.get(myOpName);
		if (op != null) return op;

		try {
			final String imgType = PlanarImg.class.getName();
			final String type = forClass.getSimpleName();
			final CtClass clazz =
				pool.makeClass(myOpName, pool.get(Object.class.getName()));
			clazz.addInterface(pool.get(MyOp.class.getName()));
			final String src =
				replace(
					makeRun(
						imgType,
						imgType,
						imgType,
						"for (int j = 0; j < a2.numSlices(); j++) {",
						"  TYPE a3 = (TYPE) a2.getPlane(j).getCurrentStorageArray();",
						"  TYPE b3 = (TYPE) b2.getPlane(j).getCurrentStorageArray();",
						"  TYPE result3 = (TYPE) result2.getPlane(j).getCurrentStorageArray();",
						"  for (int i = 0; i < a3.length; i++) {",
						"    result3[i] = (CTYPE) (a3[i] OP b3[i]);", // actual op
						"  }", // inner loop
						"}"), "OP", operator, "ITYPE", imgType, "CTYPE", componentType,
					"TYPE", type);
			clazz.addMethod(CtNewMethod.make(src, clazz));
			op = (MyOp) clazz.toClass(loader, null).newInstance();
			ops.put(myOpName, op);
			return op;
		}
		catch (final Throwable t) {
			throw new RuntimeException(t);
		}
	}

	private static String makeRun(final String aType, final String bType,
		final String resultType, final String... body)
	{
		final StringBuilder builder = new StringBuilder();
		builder
			.append("public void run(java.lang.Object result, java.lang.Object a, java.lang.Object b) {\n");
		builder.append("  " + aType + " a2 = " + objectCast(aType, "a") + ";\n");
		builder.append("  " + bType + " b2 = " + objectCast(bType, "b") + ";\n");
		builder.append("  " + resultType + " result2 = (" + resultType +
			") result;\n");
		for (final String line : body) {
			builder.append("  ").append(line).append("\n");
		}
		builder.append("}\n");
		return builder.toString();
	}

	private static String objectCast(final String type, final String name) {
		if (Byte.TYPE.getName().equals(type) || Short.TYPE.getName().equals(type) ||
			Integer.TYPE.getName().equals(type) || Long.TYPE.getName().equals(type) ||
			Float.TYPE.getName().equals(type) || Double.TYPE.getName().equals(type))
		{
			// TODO: support Long properly
			return "(" + type + ") ((Double) " + name + ").doubleValue()";
		}
		return "(" + type + ") " + name;
	}

	private static String replace(final String template, final String... pairs) {
		if ((pairs.length % 2) != 0) {
			throw new RuntimeException("Invalid number of arguments: " + pairs.length);
		}
		String result = template;
		for (int i = 0; i < pairs.length; i += 2) {
			result = result.replace(pairs[i], pairs[i + 1]);
		}
		return result;
	}
}
